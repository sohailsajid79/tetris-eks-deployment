name: Provision ECR and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy from"
        required: true
        default: "main"
      docker-image-name:
        description: "Name of the Docker image"
        required: true
        default: "tetris-js-app"
      docker-image-tag:
        description: "Tag for the Docker image"
        required: true
        default: "latest"

jobs:
  terraform-apply-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Fmt
        working-directory: terraform
        run: terraform fmt --recursive

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      - name: Terraform Apply ECR
        working-directory: terraform
        run: |
          terraform apply -target=module.aws_ecr_repository.aws_ecr_repository.js_app -auto-approve

  docker-build-push:
    runs-on: ubuntu-latest
    needs: terraform-apply-ecr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Lint Dockerfile
        run: docker run --rm -i hadolint/hadolint < Dockerfile

      - name: Build Docker image
        run: |
          docker build -t ${{ github.event.inputs.docker-image-name }} .

      - name: Test Docker image
        run: |
          docker run -d -p 8080:80 ${{ github.event.inputs.docker-image-name }}
          docker ps | grep ${{ github.event.inputs.docker-image-name }}

      - name: Tag and Push Docker image to ECR
        run: |
          docker tag ${{ github.event.inputs.docker-image-name }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ github.event.inputs.docker-image-name }}:${{ github.event.inputs.docker-image-tag }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ github.event.inputs.docker-image-name }}:${{ github.event.inputs.docker-image-tag }}
